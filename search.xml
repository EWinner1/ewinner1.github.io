<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Augular</title>
    <url>/2023/03/24/Augular/</url>
    <content><![CDATA[<h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><h2 id="较好的项目结构"><a href="#较好的项目结构" class="headerlink" title="较好的项目结构"></a>较好的项目结构</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── PageA</span><br><span class="line">│   ├── Components</span><br><span class="line">│   └── shared</span><br><span class="line">│       ├── resolves</span><br><span class="line">│       │   └── resolveA</span><br><span class="line">│       └── services</span><br><span class="line">│           └── service</span><br><span class="line">└── PageB</span><br><span class="line">    └── ···</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Config a new theme in github page</title>
    <url>/2023/03/19/Config-a-new-theme-in-github-page/</url>
    <content><![CDATA[<h1 id="选择一个你喜欢的主题"><a href="#选择一个你喜欢的主题" class="headerlink" title="选择一个你喜欢的主题"></a>选择一个你喜欢的主题</h1><p>安装一个新的主题首先当然是选择一个你喜欢的样式, 对于 hexo, 你可以在<a class="link"   href="https://hexo.io/themes/" >这里</a>寻找到你喜欢的主题的样式, 这里选择的是<a class="link"   href="https://github.com/EvanNotFound/hexo-theme-redefine" >Redefine theme</a>, 其具有不错的样式和中文文档。</p>
<h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>推荐使用<code>npm</code>进行安装。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-redefine@latest</span><br></pre></td></tr></table></figure></div>


  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>如何更新？</p>

    </div>
    <div class="notel-content">
      <p>我们可以通过<code>npm</code>安装最新版本</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-redefine@latest</span><br></pre></td></tr></table></figure></div>

<p>需要注意的是在进行更新后要检查<code>\node_modules\hexo-theme-redefine\_config.yml</code>和当前主题的配置文件<code>_config.redefine.yml</code>的关键信息是否一致, 否则可能导致构建错误。</p>

    </div>
  </div>
<p>在安装完成后, 要将<code>_config.yml</code>中的<code>theme: xxxx</code>改为<code>theme: redefine</code></p>
<h1 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h1><p>完整的配置方案请点击<a class="link"   href="https://redefine-docs.ohevan.com/docs/intro" >这里</a>, 这里只简单的介绍一些基本的配置。</p>
<h2 id="base-info"><a href="#base-info" class="headerlink" title="base_info"></a>base_info</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">base_info:</span><br><span class="line">  title: Theme Redefine # 网站标题</span><br><span class="line">  author: The Redefine Team # 作者名称</span><br><span class="line">  url: https://xxxx # Base URL</span><br></pre></td></tr></table></figure></div>

<h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><h3 id="primary-color"><a href="#primary-color" class="headerlink" title="primary_color"></a>primary_color</h3><p>设置网站的主题色</p>
<h3 id="avatar"><a href="#avatar" class="headerlink" title="avatar"></a>avatar</h3><p>设置作者的头像, 可以使用外链或者本地链接</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">avatar: /images/avatar.svg</span><br><span class="line">avatar: https://raw.githubusercontent.com/EvanNotFound/hexo-theme-redefine/main/source/images/avatar.svg</span><br></pre></td></tr></table></figure></div>

<h3 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h3><p>设置网站显示在 Title 的 logo, 也可以使用外链或者本地链接</p>
<h3 id="right-side-width"><a href="#right-side-width" class="headerlink" title="right_side_width"></a>right_side_width</h3><p>设置右侧目录模块的宽度。一般情况下, 你无需修改。如需设置, 请保持单位为<code>px</code></p>
<h3 id="first-screen"><a href="#first-screen" class="headerlink" title="first_screen"></a>first_screen</h3><p>开启后将显示在网站首页。配置为<code>enable</code>开启首屏<br><code>background_image</code>首屏背景图片, 可使用本地图片或图片外链 URL</p>

  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>Notice</p>

    </div>
    <div class="notel-content">
      <p>（如果你的 Hexo 博客的网址位于子目录, 比如 <a class="link"   href="https://example.com/blog" >https://example.com/blog</a>, 请使用 图片外链 URL）</p>

    </div>
  </div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">first_screen:</span><br><span class="line">    enable: true</span><br><span class="line">    background_image:</span><br><span class="line">      light: /images/wallhaven-wqery6-light.webp # 为亮色模式的背景图, 使用相对路径或者外链(如果网址位于子目录, 请使用外链)</span><br><span class="line">      dark: /images/wallhaven-wqery6-dark.webp # 为暗色模式的背景图, 使用相对路径或者外链(如果网址位于子目录, 请使用外链)</span><br><span class="line">    title_color:</span><br><span class="line">	  font_sizes: # 设定首屏的字体大小</span><br><span class="line">      light: &quot;#fff&quot; # 首屏标题的文字颜色 (light mode)</span><br><span class="line">      dark: &quot;#d1d1b6&quot; # 首屏标题的文字颜色 (dark mode)</span><br><span class="line">    font_sizes:</span><br><span class="line">      title: 2.8rem # 设定首屏标题的字体大小</span><br><span class="line">      subtitle: 1.5rem # 设定首屏副标题的字体大小</span><br><span class="line">    line_height: 1.2 # 首屏标题字体高度</span><br><span class="line">    title: Theme Redefine # the title in the middle of the first screen. HTML supported (e.g. svg html code of your logo)</span><br><span class="line">    subtitle: # 副标题（有打字效果）</span><br><span class="line">      enable: false</span><br><span class="line">      list: [] # 副标题的句子内容, 可以填写多个句子, 比如 [&#x27;This is the first sentence&#x27;, &#x27;This is the second one&#x27;]</span><br><span class="line">    custom_font: # 首屏自定义字体</span><br><span class="line">      enable: false</span><br><span class="line">      font_family: # 字体名称</span><br><span class="line">      font_url: # 到字体 css 样式表的链接, 比如 Google Fonts 的 https://fonts.googleapis.com/css2?family=Roboto&amp;display=swap</span><br></pre></td></tr></table></figure></div>

<h3 id="scroll"><a href="#scroll" class="headerlink" title="scroll:"></a>scroll:</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">progress_bar: # reading progress bar</span><br><span class="line">	enable: true</span><br><span class="line">percent: # reading progress percent</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></div>

<h2 id="Custom"><a href="#Custom" class="headerlink" title="Custom"></a>Custom</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom: # custom font for the whole site</span><br><span class="line">font:</span><br><span class="line">    chinese: # 自定义中文字体</span><br><span class="line">		enable: false</span><br><span class="line">		font_family: # 字体名称</span><br><span class="line">     	font_url: # 字体URL</span><br><span class="line">    english: # custom font for English</span><br><span class="line">		enable: false</span><br><span class="line">		font_family: # 字体名称</span><br><span class="line">      	font_url: # 字体URL</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Github pages</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Network Tools</title>
    <url>/2023/03/24/Network-Tools/</url>
    <content><![CDATA[<h1 id="MyTools"><a href="#MyTools" class="headerlink" title="MyTools"></a>MyTools</h1><p>挺好用的代码<a class="link"   href="https://tree.nathanfriend.io/" >树形图生成器</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>常用写作模块</title>
    <url>/2023/03/25/WritingModules/</url>
    <content><![CDATA[<h1 id="大号提示块"><a href="#大号提示块" class="headerlink" title="大号提示块"></a>大号提示块</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% notel default 信息 %&#125;</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% notel blue 提示 %&#125;</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">&#123;% endnotel %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% notel red 自定义标题 %&#125;</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">换行测试</span><br><span class="line">&#123;% endnotel %&#125;</span><br></pre></td></tr></table></figure></div>

<p>效果如下</p>

  <div class="note-large default">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>信息</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>


  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>


  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>自定义标题</p>

    </div>
    <div class="notel-content">
      <p>换行测试<br>换行测试<br>换行测试</p>

    </div>
  </div>

<h1 id="小号提示块"><a href="#小号提示块" class="headerlink" title="小号提示块"></a>小号提示块</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% note [样式/颜色] [可选: 自定义图标] %&#125;</span><br><span class="line">笔记内容</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>[样式&#x2F;颜色] 可以为 success default primary info warning danger tip question 以及 blue red 等颜色</li>
<li>[可选: 自定义图标] 选项可选，请填写 Fontawsome 的图标名称后半部分，比如 fa-image</li>
</ul>
<p>效果如下</p>

  <div class="note p-4 mb-4 rounded-small default">
    <p>默认 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small default">
    <p>default 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small primary">
    <p>primary 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small success">
    <p>success 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small info">
    <p>info 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small warning">
    <p>warning 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small danger">
    <p>danger 提示块标签</p>

  </div>


  <div class="note p-4 mb-4 rounded-small red icon-padding">
    <i class="note-icon fa-solid fa-bolt"></i><p>自定义提示块标签</p>

  </div>

<h1 id="Buttons-按钮模块"><a href="#Buttons-按钮模块" class="headerlink" title="Buttons 按钮模块"></a>Buttons 按钮模块</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% btn [可选大小]::[名称]::[url]::[可选图标] %&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>不设置任何参数的 <a class="button " href='/' title='按钮'>按钮</a> 适合融入段落中。</li>
</ul>
<p>regular 按钮适合独立于段落之外：</p>
<a class="button  regular" href='https://www.ohevan.com' title='示例博客'><i class='fa-solid fa-play-circle'></i> 示例博客</a>

<a class="button  regular" href='https://www.ohevan.com' title='示例博客'><i class='fa-solid fa-play-circle'></i> 示例博客</a>

<p>large 按钮更具有强调作用，建议搭配 center 使用：</p>
<a class="button  center large" href='https://redefine-docs.ohevan.com' title='开始使用'><i class='fa-solid fa-download'></i> 开始使用</a>

<ul>
<li><code>[可选大小]</code>:<code>center, regular, large, center large, center regular</code></li>
<li><code>[可选图标]</code>:<a class="link"   href="https://fontawesome.com/search" >Fontawesome</a> 图标名称，比如 fa-solid fa-house</li>
</ul>
<h1 id="折叠模块"><a href="#折叠模块" class="headerlink" title="折叠模块"></a>折叠模块</h1><div class="highlight-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% folding [颜色]::[标题] %&#125;</span><br><span class="line">需要写的内容</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>[颜色]</code>:<code>yellow, blue, green, red, orange, pink, cyan, white, black, gray</code><br>效果<details class="[颜色]" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>[标题] </summary>
              <div class='content'>
              <p>需要写的内容</p>
              </div>
            </details></li>
</ul>
<h1 id="分栏模块"><a href="#分栏模块" class="headerlink" title="分栏模块"></a>分栏模块</h1><p>语法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 页面内不重复的ID %&#125;</span><br><span class="line">&lt;!-- tab 栏目1名称 --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 栏目2名称 --&gt;</span><br><span class="line">内容</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div>

<p>效果如下</p>
<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">First Tab</a></li><li class="tab"><a class="#first-unique-name-2">Second Tab</a></li><li class="tab"><a class="#first-unique-name-3">Third Tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p>
<p>This is Tab 2.</p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p>
<p>This is Tab 3.</p>
<p>This is Tab 3.</p></div></div></div>
]]></content>
      <categories>
        <category>Github pages</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>frp Guidelines</title>
    <url>/2024/08/30/frp-Guidelines/</url>
    <content><![CDATA[<h1 id="一、官方文档"><a href="#一、官方文档" class="headerlink" title="一、官方文档"></a>一、官方文档</h1><p><a class="link"   href="https://gofrp.org/zh-cn/docs/" >frp中文概览</a></p>
<h1 id="二、frp是什么？"><a href="#二、frp是什么？" class="headerlink" title="二、frp是什么？"></a>二、frp是什么？</h1><p><code>frp</code>是一个专注于内网穿透的高性能的反向代理应用，支持<code>TCP</code>、<code>UDP</code>、<code>HTTP</code>、<code>HTTPS</code>等多种协议。可以将内网服务以安全、便捷的方式通过具有公网<code>IP</code>节点的中转暴露到公网。</p>
<h1 id="三、为什么使用frp？"><a href="#三、为什么使用frp？" class="headerlink" title="三、为什么使用frp？"></a>三、为什么使用frp？</h1><p>通过在具有公网IP的节点上部署<code>frp</code>服务端，可以轻松地将内网服务穿透到公网，同时提供诸多专业的功能特性，这包括：</p>
<ul>
<li>客户端服务端通信支持<code>TCP</code>、<code>KCP</code>以及<code>Websocket</code>等多种协议。</li>
<li>采用<code>TCP</code>连接流式复用，在单个连接间承载更多请求，节省连接建立时间。</li>
<li>代理组间的负载均衡。</li>
<li>端口复用，多个服务通过同一个服务端端口暴露。</li>
<li>多个原生支持的客户端插件（静态文件查看，<code>HTTP</code>、<code>SOCK5</code>代理等），便于独立使用<code>frp</code>客户端完成某些工作。</li>
<li>高度扩展性的服务端插件系统，方便结合自身需求进行功能扩展。</li>
<li>服务端和客户端UI页面。</li>
</ul>
<h1 id="四、下载"><a href="#四、下载" class="headerlink" title="四、下载"></a>四、下载</h1><p><a class="link"   href="https://github.com/fatedier/frp/releases" >Releases · fatedier&#x2F;frp</a></p>
<h1 id="五、工作原理"><a href="#五、工作原理" class="headerlink" title="五、工作原理"></a>五、工作原理</h1><p>frp主要由客户端(<code>frpc</code>)和服务端(<code>frps</code>)组成，服务端通常部署在具有公网IP的机器上，客户端通常部署在需要穿透的内网服务所在的机器上。内网服务由于没有公网IP，不能被非局域网内的其他用户访问。用户通过访问服务端的<code>frps</code>，由<code>frp</code>负责根据请求的端口或其他信息将请求路由到对应的内网机器，从而实现通信。在<code>frp</code>中一个代理对应一个需要暴露的内网服务。一个客户端支持同时配置多个代理。<code>frp</code>支持多种代理类型来适配不同的使用场景。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>tcp</td>
<td>单纯的<code>TCP</code>端口映射，服务端会根据不同的端口路由到不同的内网服务。</td>
</tr>
<tr>
<td>udp</td>
<td>单纯的<code>UDP</code>端口映射，服务端会根据不同的端口路由到不同的内网服务。</td>
</tr>
<tr>
<td>http</td>
<td>针对<code>HTTP</code>应用定制了一些额外的功能，例如修改<code>HostHeader</code>，增加鉴权。</td>
</tr>
<tr>
<td>https</td>
<td>针对<code>HTTPS</code>应用定制了一些额外的功能。</td>
</tr>
<tr>
<td>stcp</td>
<td>安全的<code>TCP</code>内网代理，需要在被访问者和访问者的机器上都部署<code>frpc</code>，不需要在服务端暴露端口。</td>
</tr>
<tr>
<td>sudp</td>
<td>安全的<code>UDP</code>内网代理，需要在被访问者和访问者的机器上都部署<code>frpc</code>，不需要在服务端暴露端口。</td>
</tr>
<tr>
<td>xtcp</td>
<td>点对点内网穿透代理，功能同<code>stcp</code>，但是流量不需要经过服务器中转。</td>
</tr>
<tr>
<td>tcpmux</td>
<td>支持服务端<code>TCP</code>端口的多路复用，通过同一个端口访问不同的内网服务。</td>
</tr>
</tbody></table>
<h1 id="六、配置文件"><a href="#六、配置文件" class="headerlink" title="六、配置文件"></a>六、配置文件</h1><h2 id="1-基本配置解析"><a href="#1-基本配置解析" class="headerlink" title="1.基本配置解析"></a>1.基本配置解析</h2><p>配置文件是<code>frp</code>的核心组件，决定了<code>frp</code>的运行方式和运行参数。<code>frp</code>目前仅支持ini格式的配置文件，<code>frps</code>和<code>frpc</code>各自支持不同的参数。<code>frpc</code>：指客户端(Clinet)配置文件，<code>frps</code>：指服务端(Server)配置文件。<code>frps</code>主要配置服务端的一些通用参数，<code>frpc</code>则需要额外配置每一个代理的详细配置。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#[common]是固定名称的段落，用于配置通用参数。</span><br><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">#[ssh]代表仅在代理ssh时使用的参数，在客户端使用，代理名称唯一且不可重复，但在同一个客户端中可以配置多个代理，比如[remoteDesktop]等</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure></div>
<h2 id="2-使用include参数"><a href="#2-使用include参数" class="headerlink" title="2.使用include参数"></a>2.使用include参数</h2><p>通过<code>includes</code>参数可以在主配置中包含其他配置文件，从而实现将代理配置拆分到多个文件中管理。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line">server_port = 7000</span><br><span class="line">includes = ./confd/.ini</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure></div>
<h2 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3.负载均衡"></a>3.负载均衡</h2><p>可以将多个相同类型的代理加入到同一个group中，从而实现负载均衡的能力。目前支持的代理类型：<code>tcp</code>,<code>http</code>,<code>tcpmux</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[test1]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 8080</span><br><span class="line">remote_port = 80</span><br><span class="line">group = web</span><br><span class="line">group_key = 123</span><br><span class="line"></span><br><span class="line">[test2]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 8081</span><br><span class="line">remote_port = 80</span><br><span class="line">group = web</span><br><span class="line">group_key = 123</span><br></pre></td></tr></table></figure></div>
<p>用户连接<code>frps</code>服务器的80端口，<code>frps</code>会将接收到的用户连接随机分发给其中一个存活的<code>proxy</code>。这样可以在一台<code>frpc</code>机器挂掉后仍然有其他节点能够提供服务。tcp类型代理要求<code>group_key</code>相同，做权限验证，且<code>remote_port</code>相同。http类型代理要求<code>group_key</code>,<code>custom_domains</code>或<code>subdomain</code>和<code>locations</code>相同。</p>
<h2 id="4-通信加密与压缩"><a href="#4-通信加密与压缩" class="headerlink" title="4.通信加密与压缩"></a>4.通信加密与压缩</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ssh]</span><br><span class="line">type = tcp</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br></pre></td></tr></table></figure></div>
<p>通过设置<code>use_encryption</code>&#x3D;<code>true</code>，将<code>frpc</code>与<code>frps</code>之间的通信内容加密传输，将会有效防止传输内容被截取。如果传输的报文长度较长，通过设置<code>use_compression</code>&#x3D;<code>true</code>对传输内容进行压缩，可以有效减小<code>frpc</code>与<code>frps</code>之间的网络流量，加快流量转发速度，但是会额外消耗一些CPU资源。</p>
<h2 id="5-服务端完整配置"><a href="#5-服务端完整配置" class="headerlink" title="5.服务端完整配置"></a>5.服务端完整配置</h2><h3 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="(1)基础配置"></a>(1)基础配置</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>bind_addr</td>
<td>string</td>
<td>服务端监听地址</td>
<td>0.0.0.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>bind_port</td>
<td>int</td>
<td>服务端监听端口</td>
<td>7000</td>
<td></td>
<td>接收frpc的连接</td>
</tr>
<tr>
<td>bind_udp_port</td>
<td>int</td>
<td>服务端监听UDP端口</td>
<td>0</td>
<td></td>
<td>用于辅助创建P2P连接</td>
</tr>
<tr>
<td>kcp_bind_port</td>
<td>int</td>
<td>服务端监听KCP协议端口</td>
<td>0</td>
<td></td>
<td>用于接收采用KCP连接的frpc</td>
</tr>
<tr>
<td>quic_bind_port</td>
<td>int</td>
<td>服务端监听QUIC协议端口</td>
<td>0</td>
<td></td>
<td>用于接收采用QUIC连接的frpc</td>
</tr>
<tr>
<td>quic_keepalive_period</td>
<td>int</td>
<td>quic协议keepalive间隔，单位:秒</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>quic_max_idle_timeout</td>
<td>int</td>
<td>quic协议的最大空闲超时时间，单位:秒</td>
<td>30</td>
<td></td>
<td></td>
</tr>
<tr>
<td>quic_max_incoming_streams</td>
<td>int</td>
<td>quic协议最大并发stream数</td>
<td>100000</td>
<td></td>
<td></td>
</tr>
<tr>
<td>proxy_bind_addr</td>
<td>string</td>
<td>代理监听地址</td>
<td>同bind_addr</td>
<td></td>
<td>可以使代理监听在不同的网卡地址</td>
</tr>
<tr>
<td>log_file</td>
<td>string</td>
<td>日志文件地址</td>
<td>.&#x2F;frps.log</td>
<td></td>
<td>如果设置为console，会将日志打印在标准输出中</td>
</tr>
<tr>
<td>log_level</td>
<td>string</td>
<td>日志等级</td>
<td>info</td>
<td>trace,debug,info,warn,error</td>
<td></td>
</tr>
<tr>
<td>log_max_days</td>
<td>int</td>
<td>日志文件保留天数</td>
<td>3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>disable_log_color</td>
<td>bool</td>
<td>禁用标准输出中的日志颜色</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>detailed_errors_to_client</td>
<td>bool</td>
<td>服务端返回详细错误信息给客户端</td>
<td>true</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tcp_mux_keepalive_interval</td>
<td>int</td>
<td>tcp_mux的心跳检查间隔时间</td>
<td>60</td>
<td></td>
<td>单位：秒</td>
</tr>
<tr>
<td>tcp_keepalive</td>
<td>int</td>
<td>和客户端底层TCP连接的keepalive间隔时间，单位秒</td>
<td>7200</td>
<td></td>
<td>负数不启用</td>
</tr>
<tr>
<td>heartbeat_timeout</td>
<td>int</td>
<td>服务端和客户端心跳连接的超时时间</td>
<td>90</td>
<td></td>
<td>单位：秒</td>
</tr>
<tr>
<td>user_conn_timeout</td>
<td>int</td>
<td>用户建立连接后等待客户端响应的超时时间</td>
<td>10</td>
<td></td>
<td>单位：秒</td>
</tr>
<tr>
<td>udp_packet_size</td>
<td>int</td>
<td>代理UDP服务时支持的最大包长度</td>
<td>1500</td>
<td></td>
<td>服务端和客户端的值需要一致</td>
</tr>
<tr>
<td>tls_cert_file</td>
<td>string</td>
<td>TLS服务端证书文件路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_key_file</td>
<td>string</td>
<td>TLS服务端密钥文件路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_trusted_ca_file</td>
<td>string</td>
<td>TLSCA证书路径</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="2-权限配置"><a href="#2-权限配置" class="headerlink" title="(2)权限配置"></a>(2)权限配置</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>authentication_method</td>
<td>string</td>
<td>鉴权方式</td>
<td>token</td>
<td>token, oidc</td>
<td></td>
</tr>
<tr>
<td>authenticate_heartbeats</td>
<td>bool</td>
<td>开启心跳消息鉴权</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>authenticate_new_work_conns</td>
<td>bool</td>
<td>开启建立工作连接的鉴权</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>token</td>
<td>string</td>
<td>鉴权使用的 token 值</td>
<td></td>
<td></td>
<td>客户端需要设置一样的值才能鉴权通过</td>
</tr>
<tr>
<td>oidc_issuer</td>
<td>string</td>
<td>oidc_issuer</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_audience</td>
<td>string</td>
<td>oidc_audience</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_skip_expiry_check</td>
<td>bool</td>
<td>oidc_skip_expiry_check</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_skip_issuer_check</td>
<td>bool</td>
<td>oidc_skip_issuer_check</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="3-管理配置"><a href="#3-管理配置" class="headerlink" title="(3)管理配置"></a>(3)管理配置</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>allow_ports</td>
<td>string</td>
<td>允许代理绑定的服务端端口</td>
<td></td>
<td></td>
<td>格式为 1000-2000,2001,3000-4000</td>
</tr>
<tr>
<td>max_pool_count</td>
<td>int</td>
<td>最大连接池大小</td>
<td>5</td>
<td></td>
<td></td>
</tr>
<tr>
<td>max_ports_per_client</td>
<td>int</td>
<td>限制单个客户端最大同时存在的代理数</td>
<td>0</td>
<td></td>
<td>0 表示没有限制</td>
</tr>
<tr>
<td>tls_only</td>
<td>bool</td>
<td>只接受启用了 TLS 的客户端连接</td>
<td>false</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="4-Dashboard-监控"><a href="#4-Dashboard-监控" class="headerlink" title="(4)Dashboard 监控"></a>(4)Dashboard 监控</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>dashboard_addr</td>
<td>string</td>
<td>启用 Dashboard 监听的本地地址</td>
<td>0.0.0.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dashboard_port</td>
<td>int</td>
<td>启用 Dashboard 监听的本地端口</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dashboard_user</td>
<td>string</td>
<td>HTTP BasicAuth 用户名</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>dashboard_pwd</td>
<td>string</td>
<td>HTTP BasicAuth 密码</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>dashboard_tls_mode</td>
<td>bool</td>
<td>是否启用 TLS 模式</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dashboard_tls_cert_file</td>
<td>string</td>
<td>TLS 证书文件路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>dashboard_tls_key_file</td>
<td>string</td>
<td>TLS 密钥文件路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>enable_prometheus</td>
<td>bool</td>
<td>是否提供 Prometheus 监控接口</td>
<td>false</td>
<td></td>
<td>需要同时启用了 Dashboard 才会生效</td>
</tr>
<tr>
<td>asserts_dir</td>
<td>string</td>
<td>静态资源目录</td>
<td></td>
<td></td>
<td>Dashboard 使用的资源默认打包在二进制文件中，通过指定此参数使用自定义的静态资源</td>
</tr>
<tr>
<td>pprof_enable</td>
<td>bool</td>
<td>启动 Go HTTP pprof</td>
<td>false</td>
<td></td>
<td>用于应用调试</td>
</tr>
</tbody></table>
<h3 id="5-HTTP-HTTPS"><a href="#5-HTTP-HTTPS" class="headerlink" title="(5)HTTP &amp; HTTPS"></a>(5)HTTP &amp; HTTPS</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>vhost_http_port</td>
<td>int</td>
<td>为 HTTP 类型代理监听的端口</td>
<td>0</td>
<td></td>
<td>启用后才支持 HTTP 类型的代理，默认不启用</td>
</tr>
<tr>
<td>vhost_https_port</td>
<td>int</td>
<td>为 HTTPS 类型代理监听的端口</td>
<td>0</td>
<td></td>
<td>启用后才支持 HTTPS 类型的代理，默认不启用</td>
</tr>
<tr>
<td>vhost_http_timeout</td>
<td>int</td>
<td>HTTP 类型代理在服务端的 ResponseHeader 超时时间</td>
<td>60</td>
<td></td>
<td></td>
</tr>
<tr>
<td>subdomain_host</td>
<td>string</td>
<td>二级域名后缀</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>custom_404_page</td>
<td>string</td>
<td>自定义 404 错误页面地址</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="6-TCPMUX"><a href="#6-TCPMUX" class="headerlink" title="(6)TCPMUX"></a>(6)TCPMUX</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>tcpmux_httpconnect_port</td>
<td>int</td>
<td>为 TCPMUX 类型代理监听的端口</td>
<td>0</td>
<td></td>
<td>启用后才支持 TCPMUX 类型的代理，默认不启用</td>
</tr>
<tr>
<td>tcpmux_passthrough</td>
<td>bool</td>
<td>是否透传 CONNECT 请求</td>
<td>false</td>
<td></td>
<td>通常在本地服务是 HTTP Proxy 时使用</td>
</tr>
</tbody></table>
<h2 id="6-客户端完整配置"><a href="#6-客户端完整配置" class="headerlink" title="6.客户端完整配置"></a>6.客户端完整配置</h2><h3 id="1-基础配置-1"><a href="#1-基础配置-1" class="headerlink" title="(1)基础配置"></a>(1)基础配置</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>server_addr</td>
<td>string</td>
<td>连接服务端的地址</td>
<td>0.0.0.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>server_port</td>
<td>int</td>
<td>连接服务端的端口</td>
<td>7000</td>
<td></td>
<td></td>
</tr>
<tr>
<td>connect_server_local_ip</td>
<td>string</td>
<td>连接服务端时所绑定的本地 IP</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>dial_server_timeout</td>
<td>int</td>
<td>连接服务端的超时时间</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>dial_server_keepalive</td>
<td>int</td>
<td>和服务端底层 TCP 连接的 keepalive 间隔时间，单位秒</td>
<td>7200</td>
<td></td>
<td>负数不启用</td>
</tr>
<tr>
<td>http_proxy</td>
<td>string</td>
<td>连接服务端使用的代理地址</td>
<td></td>
<td></td>
<td>格式为 {protocol}:&#x2F;&#x2F;user:<a class="link"   href="mailto:&#x70;&#x61;&#115;&#x73;&#119;&#100;&#x40;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#56;&#46;&#49;&#x2e;&#49;&#50;&#56;" >&#x70;&#x61;&#115;&#x73;&#119;&#100;&#x40;&#x31;&#x39;&#50;&#46;&#49;&#x36;&#56;&#46;&#49;&#x2e;&#49;&#50;&#56;</a>:8080 protocol 目前支持 http、socks5、ntlm</td>
</tr>
<tr>
<td>log_file</td>
<td>string</td>
<td>日志文件地址</td>
<td>.&#x2F;frpc.log</td>
<td></td>
<td>如果设置为 console，会将日志打印在标准输出中</td>
</tr>
<tr>
<td>log_level</td>
<td>string</td>
<td>日志等级</td>
<td>info</td>
<td>trace, debug, info, warn, error</td>
<td></td>
</tr>
<tr>
<td>log_max_days</td>
<td>int</td>
<td>日志文件保留天数</td>
<td>3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>disable_log_color</td>
<td>bool</td>
<td>禁用标准输出中的日志颜色</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>pool_count</td>
<td>int</td>
<td>连接池大小</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>user</td>
<td>string</td>
<td>用户名</td>
<td></td>
<td></td>
<td>设置此参数后，代理名称会被修改为 {user}.{proxyName}，避免代理名称和其他用户冲突</td>
</tr>
<tr>
<td>dns_server</td>
<td>string</td>
<td>使用 DNS 服务器地址</td>
<td></td>
<td></td>
<td>默认使用系统配置的 DNS 服务器，指定此参数可以强制替换为自定义的 DNS 服务器地址</td>
</tr>
<tr>
<td>login_fail_exit</td>
<td>bool</td>
<td>第一次登陆失败后是否退出</td>
<td>true</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protocol</td>
<td>string</td>
<td>连接服务端的通信协议</td>
<td>tcp</td>
<td>tcp, kcp, quic, websocket</td>
<td></td>
</tr>
<tr>
<td>quic_keepalive_period</td>
<td>int</td>
<td>quic 协议 keepalive 间隔，单位: 秒</td>
<td>10</td>
<td></td>
<td></td>
</tr>
<tr>
<td>quic_max_idle_timeout</td>
<td>int</td>
<td>quic 协议的最大空闲超时时间，单位: 秒</td>
<td>30</td>
<td></td>
<td></td>
</tr>
<tr>
<td>quic_max_incoming_streams</td>
<td>int</td>
<td>quic 协议最大并发 stream 数</td>
<td>100000</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_enable</td>
<td>bool</td>
<td>启用 TLS 协议加密连接</td>
<td>false</td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_cert_file</td>
<td>string</td>
<td>TLS 客户端证书文件路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_key_file</td>
<td>string</td>
<td>TLS 客户端密钥文件路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_trusted_ca_file</td>
<td>string</td>
<td>TLS CA 证书路径</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>tls_server_name</td>
<td>string</td>
<td>TLS Server 名称</td>
<td></td>
<td></td>
<td>为空则使用 server_addr</td>
</tr>
<tr>
<td>disable_custom_tls_first_byte</td>
<td>bool</td>
<td>TLS 不发送 0x17</td>
<td>false</td>
<td></td>
<td>当为 true 时，不能端口复用</td>
</tr>
<tr>
<td>tcp_mux_keepalive_interval</td>
<td>int</td>
<td>tcp_mux 的心跳检查间隔时间</td>
<td>60</td>
<td></td>
<td>单位：秒</td>
</tr>
<tr>
<td>heartbeat_interval</td>
<td>int</td>
<td>向服务端发送心跳包的间隔时间</td>
<td>30</td>
<td></td>
<td>建议启用 tcp_mux_keepalive_interval，将此值设置为 -1</td>
</tr>
<tr>
<td>heartbeat_timeout</td>
<td>int</td>
<td>和服务端心跳的超时时间</td>
<td>90</td>
<td></td>
<td></td>
</tr>
<tr>
<td>udp_packet_size</td>
<td>int</td>
<td>代理 UDP 服务时支持的最大包长度</td>
<td>1500</td>
<td></td>
<td>服务端和客户端的值需要一致</td>
</tr>
<tr>
<td>start</td>
<td>string</td>
<td>指定启用部分代理</td>
<td></td>
<td></td>
<td>当配置了较多代理，但是只希望启用其中部分时可以通过此参数指定，默认为全部启用</td>
</tr>
<tr>
<td>meta_xxx</td>
<td>map</td>
<td>附加元数据</td>
<td></td>
<td></td>
<td>会传递给服务端插件，提供附加能力</td>
</tr>
</tbody></table>
<h3 id="2-权限验证"><a href="#2-权限验证" class="headerlink" title="(2)权限验证"></a>(2)权限验证</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>authentication_method</td>
<td>string</td>
<td>鉴权方式</td>
<td>token</td>
<td>token, oidc</td>
<td>需要和服务端一致</td>
</tr>
<tr>
<td>authenticate_heartbeats</td>
<td>bool</td>
<td>开启心跳消息鉴权</td>
<td>false</td>
<td></td>
<td>需要和服务端一致</td>
</tr>
<tr>
<td>authenticate_new_work_conns</td>
<td>bool</td>
<td>开启建立工作连接的鉴权</td>
<td>false</td>
<td></td>
<td>需要和服务端一致</td>
</tr>
<tr>
<td>token</td>
<td>string</td>
<td>鉴权使用的 token 值</td>
<td></td>
<td></td>
<td>需要和服务端设置一样的值才能鉴权通过</td>
</tr>
<tr>
<td>oidc_client_id</td>
<td>string</td>
<td>oidc_client_id</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_client_secret</td>
<td>string</td>
<td>oidc_client_secret</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_audience</td>
<td>string</td>
<td>oidc_audience</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_scope</td>
<td>string</td>
<td>oidc_scope</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_token_endpoint_url</td>
<td>string</td>
<td>oidc_token_endpoint_url</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>oidc_additional_xxx</td>
<td>map</td>
<td>OIDC 附加参数</td>
<td></td>
<td></td>
<td>map 结构，key 需要以 oidc_additional_ 开头</td>
</tr>
</tbody></table>
<h3 id="3-UI"><a href="#3-UI" class="headerlink" title="(3)UI"></a>(3)UI</h3><table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
<th>默认值</th>
<th>可选值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>admin_addr</td>
<td>string</td>
<td>启用 AdminUI 监听的本地地址</td>
<td>0.0.0.0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>admin_port</td>
<td>int</td>
<td>启用 AdminUI 监听的本地端口</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>admin_user</td>
<td>string</td>
<td>HTTP BasicAuth 用户名</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>admin_pwd</td>
<td>string</td>
<td>HTTP BasicAuth 密码</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>asserts_dir</td>
<td>string</td>
<td>静态资源目录</td>
<td></td>
<td></td>
<td>AdminUI 使用的资源默认打包在二进制文件中，通过指定此参数使用自定义的静态资源</td>
</tr>
<tr>
<td>pprof_enable</td>
<td>bool</td>
<td>启动 Go HTTP pprof</td>
<td>false</td>
<td></td>
<td>用于应用调试</td>
</tr>
</tbody></table>
<h1 id="七、相关指令"><a href="#七、相关指令" class="headerlink" title="七、相关指令"></a>七、相关指令</h1><table>
<thead>
<tr>
<th>Command</th>
<th>CommandEffect</th>
</tr>
</thead>
<tbody><tr>
<td>.&#x2F;frpc-c.&#x2F;frpc.ini</td>
<td>通过配置文件frpc.ini启动frp</td>
</tr>
<tr>
<td>frpcverify-c.&#x2F;frpc.ini</td>
<td>通过frpc校验frpc.ini的正确性</td>
</tr>
<tr>
<td>frpsverify-c.&#x2F;frps.ini</td>
<td>通过frps校验frps.ini的正确性</td>
</tr>
<tr>
<td>frpc reload -c .&#x2F;frpc.ini</td>
<td>根据更新后的配置文件重启</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo</a><br>This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation</a> for more info.<br>If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting</a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="初始化网站"><a href="#初始化网站" class="headerlink" title="初始化网站"></a>初始化网站</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure></div>

<h3 id="创建一个新的-Blog"><a href="#创建一个新的-Blog" class="headerlink" title="创建一个新的 Blog"></a>创建一个新的 Blog</h3><p>如果标题包含空格，使用引号将其包裹起来。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing</a></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server</a></p>
<h3 id="清理可能存在的编译缓存问题"><a href="#清理可能存在的编译缓存问题" class="headerlink" title="清理可能存在的编译缓存问题"></a>清理可能存在的编译缓存问题</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></div>

<h3 id="编译生成静态文件"><a href="#编译生成静态文件" class="headerlink" title="编译生成静态文件"></a>编译生成静态文件</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating</a></p>
<h3 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment</a></p>
]]></content>
      <categories>
        <category>Github pages</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j</title>
    <url>/2024/08/30/log4j/</url>
    <content><![CDATA[<p>Log4j 是一种非常流行的日志框架，最新版本是 2.x。</p>
<p>Log4j 是一个组件化设计的日志系统，它的架构大致如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/log4j.png"
                      alt="log4j"
                ></p>
<p>当我们使用 Log4j 输出一条日志时，Log4j 自动通过不同的 Appender 把同一条日志输出到不同的目的地。例如：</p>
<ul>
<li><code>console</code>：输出到屏幕；</li>
<li><code>file</code>：输出到文件；</li>
<li><code>socket</code>：通过网络输出到远程计算机；</li>
<li><code>jdbc</code>：输出到数据库</li>
</ul>
<p>在输出日志的过程中，通过 Filter 来过滤哪些 log 需要被输出，哪些 log 不需要被输出。例如，仅输出 ERROR 级别的日志。<br>最后，通过 Layout 来格式化日志信息，例如，自动添加日期、时间、方法名称等信息。<br>上述结构虽然复杂，但我们在实际使用的时候，并不需要关心 Log4j 的 API，而是通过配置文件来配置它。<br>以 XML 配置为例，使用 Log4j 的时候，我们把一个 log4j2.xml 的文件放到 classpath 下就可以让 Log4j 读取配置文件并按照我们的配置来输出日志。下面是一个配置文件的例子：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志格式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span>&gt;</span>%d&#123;MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125;%n%msg%n%n<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义文件名变量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file.err.filename&quot;</span>&gt;</span>log/err.log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file.err.pattern&quot;</span>&gt;</span>log/err.%i.log.gz<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义Appender，即目的地 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义输出到屏幕 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志格式引用上面定义的log.pattern --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;log.pattern&#125;&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;err&quot;</span> <span class="attr">bufferedIO</span>=<span class="string">&quot;true&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;file.err.filename&#125;&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;file.err.pattern&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;log.pattern&#125;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 根据文件大小自动切割日志 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1 MB&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 保留最近10份 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对info级别的日志，输出到console --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;err&quot;</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>虽然配置 Log4j 比较繁琐，但一旦配置完成，使用起来就非常方便。对上面的配置文件，凡是 INFO 级别的日志，会自动输出到屏幕，而 ERROR 级别的日志，不但会输出到屏幕，还会同时输出到文件。并且，一旦日志文件达到指定大小（1MB），Log4j 就会自动切割新的日志文件，并最多保留 10 份。</p>
<p>有了配置文件还不够，因为 Log4j 也是一个第三方库，我们需要从这里下载 Log4j，解压后，把以下 3 个 jar 包放到 classpath 中：</p>
<p>log4j-api-2.x.jar<br>log4j-core-2.x.jar<br>log4j-jcl-2.x.jar</p>
<p>因为 Commons Logging 会自动发现并使用 Log4j，所以，把上一节下载的 commons-logging-1.2.jar 也放到 classpath 中。</p>
<p>要打印日志，只需要按 Commons Logging 的写法写，不需要改动任何代码，就可以得到 Log4j 的日志输出，类似：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">03-03 12:09:45.880 [main] INFO  com.itranswarp.learnjava.Main</span><br><span class="line">Start process...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>log4j</tag>
        <tag>Tech</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的正则表达式语法</title>
    <url>/2024/08/31/regular-expression/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.runoob.com/regexp/regexp-syntax.html" >正则表达式 – 语法 | 菜鸟教程</a></p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>匹配结果</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+</td>
</tr>
<tr>
<td></td>
<td>匹配前面的子表达式零次或多次。要匹配  字符，请使用 \</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或多次。要匹配  字符，请使用 \</td>
</tr>
<tr>
<td>[abcde]</td>
<td>匹配所有的”[]”里的字符</td>
</tr>
<tr>
<td>[^abcde]</td>
<td>匹配所有的非”[]”里的字符</td>
</tr>
<tr>
<td>A-Z</td>
<td>匹配所有的大写字母</td>
</tr>
<tr>
<td>a-z</td>
<td>匹配所有的小写字母</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符 (\n、\r) 之外的任何单个字符，相当于 [^\n\r]</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，即字与空格间的位置</td>
</tr>
<tr>
<td>\B</td>
<td>非单词边界匹配</td>
</tr>
<tr>
<td>\s</td>
<td>匹配所有的空白符，包括换行</td>
</tr>
<tr>
<td>\S</td>
<td>匹配所有的非空白符，不包括换行</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母数字下划线，等价于[A-Za-z0-9]</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结尾</td>
</tr>
<tr>
<td>()</td>
<td>匹配子表达式的开始和结束位置，被括号包裹的元素被视为一个单独的元素。</td>
</tr>
<tr>
<td>\</td>
<td>转义字符</td>
</tr>
<tr>
<td>a{n}</td>
<td>匹配括号前面的字符n次</td>
</tr>
<tr>
<td>a{n,}</td>
<td>匹配括号前面的字符<strong>至少</strong>n次</td>
</tr>
<tr>
<td>a{n,m}</td>
<td>匹配括号前面的字符<strong>至少</strong>n次，<strong>至多</strong>m次</td>
</tr>
<tr>
<td>exp1(?&#x3D;exp2)</td>
<td>查找<strong>满足</strong>表达式2且在表达式2<strong>前面</strong>的表达式1</td>
</tr>
<tr>
<td>exp1(?!exp2)</td>
<td>查找<strong>不满足</strong>表达式2且在表达式2<strong>前面</strong>的表达式1</td>
</tr>
<tr>
<td>(?&lt;&#x3D;exp2)exp1</td>
<td>查找<strong>满足</strong>表达式2且在表达式2<strong>后面</strong>的表达式1</td>
</tr>
<tr>
<td>(?&lt;!exp2)exp1</td>
<td>查找<strong>不满足</strong>表达式2且在表达式2<strong>后面</strong>的表达式1</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Regular expression</tag>
      </tags>
  </entry>
</search>
